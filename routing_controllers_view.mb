# Routing,Controllers and View Questions

#### Provide an example of RESTful routing and controller.

Rest stands for representational state transfer. It is an architecture for designing networked applications over (in most cases) the HTTP protocol.
It uses HTTP verbs (GET,POST,PUT,DELETE) in combination with URLs to perform all of the CRUD actions on a resource.

GET /books, gets all books @Books=Book.all in index action
GET /books/new, used to show the create book form, in the new action
POST /books, creates a new book resource @Book=Book.create(book_params) in create action
PUT /book/:id, used to update book, @Book=Book.update(id, book_params) in update action
DELETE /book/:id/destroy, used to delete book, Book.destroy(id) in destroy action
GET /book/:id, used to show book details, @Book=Book.find(id) in show action
GET /book/:id/edit, used to show the edit form @Book=Book.find(id) in the edit action



#### Describe CRUD verbs and actions.

C: Create
R: Read
U: Update
D: Delete

CRUD are the basic operations that can be performed on data/or resource. New records can be created, they can be accessed (read), updated and deleted. Most applications have some sort of CRUD functionality and a CRUD application is one which uses forms to get data into and out of a database. 


#### How should you test routes?
Testing routes should be done as part of your integration tests.

#### How should you use filters in controllers?
Filters are methods that are carried out before,after or around a controller action. They are inherited, so if a filter is set on ApplicationController it will be run on every controller. A common before filter is one which checks if the user is logged in. After and around filters are typically used for logging. Around filters can also be used for exception handling and setup and teardown.

before_action, after_action and around_action are the filter methods.
To skip an applicationController filter you can use the following

```
class LoginsController < ApplicationController
  skip_before_action :require_login, only: [:new, :create]
end
```

What are Strong Parameters?
Strong parameters allow only parameters which have been explicitly permitted to be assigned to objects when performing mass assignment.

```
params.permit :name, :login, :mail, :organization_ids => [], ...
```

#### What do we need to test in controllers?

Usually when you write controller tests youâ€™ll only be testing edge cases. Edge cases such as if a user enters an invalid ID to a show page they should be shown a 404 page for example. But the tests are not strictly necessary, as controller testing often overlaps with either integration or unit testing. 

#### How should you use content_for and yield?
Taken from stack overflow. 

content_for is how you specify which content is going to be rendered into which content area. You might have something like this:
```
<% content_for :my_content do %>
  This is the content.
<% end %>
```

yield is how you specify where your content areas is going to go within a layout. You might have something like this:
```
<div>
  <h1> This is the wrapper!</h1>
  <%= yield :my_content %>
</div>
```

The result would be
```
<div>
  <h1> This is the wrapper!</h1>
  This is the content.
</div>
```

#### How should you use nested layouts?

Nested layouts are used when your application needs a layout that differs slightly from your regular layout to support one particular controller. 

On the pages generated by the controller, if you want to hide and add features you can use content_for 
```
<% content_for :stylesheets do %>
  #top_menu {display: none}
  #right_menu {float: right; background-color: yellow; color: black}
<% end %>
```

```
<% content_for :content do %>
  <div id="right_menu">Right menu items here</div>
  <%= content_for?(:news_content) ? yield(:news_content) : yield %>
<% end %>
```

in the main application.html.erb this additional code is added here. 

```
<div id="content"><%= content_for?(:content) ? yield(:content) : yield %></div>
```



 

